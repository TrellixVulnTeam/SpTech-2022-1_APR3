{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Teste grafos1","provenance":[],"authorship_tag":"ABX9TyPzcIb44jNqjL3RA0els+5W"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zTwczCTybUsx","outputId":"25588285-397e-4ff1-d221-dde9d08ce90f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Menu\n","adiciona vertice <key>\n","adiciona aresta <src> <dest> [weight]\n","mostra\n","sair\n","O que vc gostaria de fazer? add vertex 1\n","O que vc gostaria de fazer? add vertex 2\n","O que vc gostaria de fazer? add vertex 3\n","O que vc gostaria de fazer? add edge 1 2 4\n","O que vc gostaria de fazer? show\n","O que vc gostaria de fazer? mostra\n","Vertices: \n","Arestas: \n","\n"]}],"source":["class Graph:\n","    def __init__(self):\n","        # dicionário contendo chaves que mapeiam  o objeto de vértice correspondente\n","        self.vertices = {}\n"," \n","    def add_vertices(self, key):\n","        \"\"\"adicona um vértice ao grafo\"\"\"\n","        vertices = Vertices(key)\n","        self.vertices[key] = vertices\n"," \n","    def get_vertice(self, key):\n","        \"\"\"Retorna objeto vertice com a chave correspondente\"\"\"\n","        return self.vertices[key]\n"," \n","    def __contains__(self, key):\n","        return key in self.vertices\n"," \n","    def add_aresta(self, src_key, dest_key, weight=1):\n","        \"\"\"Adicionar aresta de src_key a dest_key com o peso dado.\"\"\"\n","        self.vertices[src_key].add_neighbour(self.vertices[dest_key], weight)\n"," \n","    def does_aresta_exist(self, src_key, dest_key):\n","        \"\"\"Retorna verdadeiro se existe uma aresta vinda da chave origem para chave destino.\"\"\"\n","        return self.vertices[src_key].does_it_point_to(self.vertices[dest_key])\n"," \n","    def __iter__(self):\n","        return iter(self.vertices.values())\n"," \n"," \n","class Vertex:\n","    def __init__(self, key):\n","        self.key = key\n","        self.points_to = {}\n"," \n","    def get_key(self):\n","        \"\"\"Retorna chave correspondente para este vertice objeto.\"\"\"\n","        return self.key\n"," \n","    def add_neighbour(self, dest, weight):\n","        \"\"\"Faça este vértice apontar para o destino com o peso de aresta dado.\"\"\"\n","        self.points_to[dest] = weight\n"," \n","    def get_neighbours(self):\n","        \"\"\"Retorna todos os vértices apontados por este vértice.\"\"\"\n","        return self.points_to.keys()\n"," \n","    def get_weight(self, dest):\n","        \"\"\"Represente o peso da aresta deste vértice para o destino.\"\"\"\n","        return self.points_to[dest]\n"," \n","    def does_it_point_to(self, dest):\n","        \"\"\"Retorna True se este vértice apontar para o destino.\"\"\"\n","        return dest in self.points_to\n"," \n"," \n","g = Graph()\n","print('Menu')\n","print('adiciona vertice <key>')\n","print('adiciona aresta <src> <dest> [weight]')\n","print('mostra')\n","print('sair')\n"," \n","while True:\n","    do = input('O que vc gostaria de fazer? ').split()\n"," \n","    operation = do[0]\n","    if operation == 'adiciona':\n","        suboperation = do[1]\n","        if suboperation == 'vertice':\n","            key = int(do[2])\n","            if key not in g:\n","                g.add_vertex(key)\n","            else:\n","                print('Vértice já existe.')\n","        elif suboperation == 'aresta':\n","            src = int(do[2])\n","            dest = int(do[3])\n","            if src not in g:\n","                print('Vértice {} não existe.'.format(src))\n","            elif dest not in g:\n","                print('Vértice {} não existe.'.format(dest))\n","            else:\n","                if not g.does_edge_exist(src, dest):\n","                    if len(do) == 5:\n","                        weight = int(do[4])\n","                        g.add_edge(src, dest, weight)\n","                    else:\n","                        g.add_edge(src, dest)\n","                else:\n","                    print('A Aresta já existe.')\n"," \n","    elif operation == 'mostra':\n","        print('Vertices: ', end='')\n","        for v in g:\n","            print(v.get_key(), end=' ')\n","        print()\n"," \n","        print('Arestas: ')\n","        for v in g:\n","            for dest in v.get_neighbours():\n","                w = v.get_weight(dest)\n","                print('(src={}, dest={}, weight={}) '.format(v.get_key(),\n","                                                             dest.get_key(), w))\n","        print()\n"," \n","    elif operation == 'sair':\n","        break"]},{"cell_type":"code","source":[""],"metadata":{"id":"hfLraMWlkDsK"},"execution_count":null,"outputs":[]}]}